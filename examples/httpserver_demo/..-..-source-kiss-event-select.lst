       |ï»¿module kiss.event.select;
       |
       |import kiss.event.Poll;
       |import kiss.event.Event;
       |import kiss.time.timer;
       |import kiss.time.itimer;
       |
       |import core.thread;
       |
       |import std.socket;
       |import kiss.util.log;
       |import std.conv;
       |import std.stdio;
       |
       |import object;
       |
       |
       |final class select : Thread , Poll
       |{
       |
       |        class Data
       |        {
       |
0000000|                this(socket_t f , Event e , IOEventType t)
       |                {
0000000|                        fd = f;
0000000|                        event = e;
0000000|                        type = t;
       |                }
       |
       |                socket_t    fd;
       |                Event           event;
       |                IOEventType type;
       |        }
       |
       |
       |
      8|        this(int timeout = 10)
       |        {       
      8|                 _rset = new SocketSet();
      8|                 _wset = new SocketSet();
      8|                 _eset = new SocketSet();
      8|                _wheeltimer = new WheelTimer();
      8|                _timeout = timeout;
      8|                _maxfd = _rset.max();
      8|                super(&run);
       |        }
       |
       |        ~this()
       |        {
      8|                _wheeltimer.destroy();
      8|                _eset.destroy();
      8|                _wset.destroy();
      8|                _rset.destroy();
       |        }
       |
       |        bool addEvent(Event event , int fd , IOEventType type)
       |        {
0000000|                socket_t s_fd = cast(socket_t)fd;
       |        
0000000|                Data data = new Data(s_fd , event , type);
       |
0000000|                if(_mapevents.length >= _maxfd )
       |                {
0000000|                        log_error("too much fd , len :" ~ to!string(_mapevents.length) ~ "max:" ~ to!string(_maxfd));
0000000|                                return false;
       |                }
       |
0000000|                assert(s_fd !in _mapevents);
0000000|                _mapevents[s_fd]  = data;
0000000|                return true;
       |        }
       |
       |        bool delEvent(Event event , int fd , IOEventType type)
       |        {
0000000|                socket_t s_fd = cast(socket_t)fd;
       |        
0000000|                assert(s_fd in _mapevents);
0000000|                _mapevents.remove(s_fd);
       |
0000000|                return true;
       |        }
       |
       |        bool modEvent(Event event , int fd , IOEventType type)
       |        {
0000000|                socket_t s_fd = cast(socket_t)fd;
       |        
0000000|                assert(s_fd in _mapevents);
0000000|                _mapevents[s_fd].type = type;
       |
0000000|                return true;
       |        }
       |
       |        bool poll(int milltimeout)
       |        {
0000000|                TimeVal val;
0000000|                val.seconds = milltimeout/1000 ;
0000000|                val.microseconds = milltimeout * 1000 - val.seconds * 1000 * 1000;
0000000|                _rset.reset();
0000000|                _wset.reset();
0000000|                _eset.reset();
       |
0000000|                scope(exit) { _wheeltimer.poll();}
       |        
0000000|                Data[] datas;
       |
       |        
0000000|                if(_mapevents.length == 0)
0000000|                                return true;
0000000|                datas = _mapevents.values();
       |
0000000|                foreach(v ; datas )
       |                {
0000000|                        if(v.type & IOEventType.IO_EVENT_READ)
       |                        {
0000000|                                _rset.add(v.fd);
       |                        }
       |
0000000|                        if( v.type & IOEventType.IO_EVENT_WRITE)
       |                        {       
0000000|                                _wset.add(v.fd);
       |                        }
       |
0000000|                        if(v.type & IOEventType.IO_EVENT_ERROR)
       |                        {
0000000|                                _eset.add(v.fd);
       |                        }
       |                }
       |
0000000|                int ret = Socket.select(_rset ,_wset , _eset  , &val);
       |        
0000000|                if(ret <= 0)
       |                {
0000000|                        return true;
       |                }
       |                else
       |                {
0000000|                        foreach(v ; datas)
       |                        {
       |                                
       |                                //close
0000000|                                if(v.event.isReadyClose())
       |                                {
0000000|                                        if(v.event.onClose())
0000000|                                                delete v.event;
0000000|                                        continue;                                                                                                                                                                                                                                                                                                                                       
       |                                }
       |                        
       |                                //error
0000000|                                if(_eset.isSet(v.fd))
       |                                {
       |
0000000|                                        if(v.type & (~IOEventType.IO_EVENT_ERROR)) 
       |                                        {
0000000|                                                log_error("io_event_error");
       |                                        }
       |
0000000|                                        if(!v.event.onClose())
0000000|                                                delete v.event; 
0000000|                                        continue;
       |                                }
       |
       |                                //read
0000000|                                else if(_rset.isSet(v.fd))
       |                                {
       |
0000000|                                        if(v.type & (~IOEventType.IO_EVENT_READ)) 
       |                                        {
0000000|                                                log_error("io_event_read");
       |                                        }
       |
0000000|                                        if(!v.event.onRead())
       |                                        {
0000000|                                                if(v.event.onClose())
0000000|                                                        delete v.event; 
0000000|                                                continue;
       |                                        }
       |                                }
       |                                //write
0000000|                                else if( _wset.isSet(v.fd))
       |                                {
0000000|                                        if(v.type & (~IOEventType.IO_EVENT_WRITE))
       |                                        {
0000000|                                                log_error("io_event_write");
       |                                        }
       |
0000000|                                        if(!v.event.onWrite())
       |                                        {
0000000|                                                if(v.event.onClose())
0000000|                                                        delete v.event;
0000000|                                                continue;
       |                                        }
       |                                }
       |                        
       |                        }
       |
       |                }
       |
0000000|                return true;
       |
       |        }
       |
       |
       |        void run()
       |        {
0000000|                while(_flag)
0000000|                        poll(_timeout);
       |        }
       |
       |
       |        TimerFd addTimer(Timer timer , ulong interval , WheelType type)
       |        {
0000000|                stNodeLink st = new stNodeLink(timer , interval ,type);
0000000|                _wheeltimer.add(st);
0000000|                return st;
       |        }
       |        
       |        void delTimer(TimerFd fd)
       |        {
0000000|                _wheeltimer.del(cast(stNodeLink)fd);
       |        }
       |        
       |        // thread 
       |        void start()
       |        {
0000000|                if(_flag)
       |                {
0000000|                        log_error("already started");
0000000|                        return ;
       |                }
0000000|                _flag = true;
       |                
0000000|                super.start();
       |        }
       |        void stop()
       |        {
0000000|                _flag = false;
       |        }
       |        void wait()
       |        {
0000000|                super.join();
       |        }
       |
       |
       |        SocketSet                                                       _rset;
       |        SocketSet                                                       _wset;
       |        SocketSet                                                       _eset;
       |        bool                                                            _flag;
       |        int                                                                     _maxfd;
       |        private int                                                     _timeout;
       |        private Data[socket_t]                          _mapevents;
       |        private WheelTimer                                      _wheeltimer;
       |
       |}
       |
..\..\source\kiss\event\select.d is 13% covered

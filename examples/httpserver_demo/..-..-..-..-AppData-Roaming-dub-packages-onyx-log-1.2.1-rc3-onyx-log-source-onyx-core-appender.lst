       |/**
       | * onyx-log: the generic, fast, multithreading logging library.
       | *
       | * Appenders implementation.
       | *
       | * Copyright: Â© 2015 onyx-itdevelopment
       | *
       | * License: MIT license. License terms written in "LICENSE.txt" file
       | *
       | * Authors: Oleg Nykytenko (onyx), onyx.itdevelopment@gmail.com
       | *
       | * Version: 0.xx
       | *
       | * Date: 13.05.2015
       | */
       |
       |module onyx.core.appender;
       |
       |
       |@system:
       |package:
       |
       |
       |import onyx.bundle;
       |
       |/*
       | * Appender Create interface
       | *
       | * Use by Logger for create new Appender
       | *
       | * ====================================================================================
       | */ 
       |interface AppenderFactory
       |{
       |        Appender factory(immutable Bundle bundle);
       |}
       |
       |
       |
       |/**
       | * Accept messages and publicate it in target
       | */ 
       |abstract class Appender
       |{
       |        /**
       |         * Append new message
       |         */ 
       |        void append(immutable string message);
       |}
       |
       |
       |/**
       | * Factory for NullAppender
       | *
       | * ====================================================================================
       | */ 
       |class NullAppenderFactory:AppenderFactory
       |{
       |        override Appender factory(immutable Bundle bundle)
       |        {
0000000|                return new NullAppender();
       |        }
       |}
       |
       |/**
       | * Only Accept messages
       | */ 
       |class NullAppender:Appender
       |{
       |        /**
       |         * Append new message and do nothing
       |         */
       |        override void append(immutable string message) nothrow pure {}
       |}
       |
       |
       |/**
       | * Factory for ConsoleAppender
       | *
       | * ====================================================================================
       | */
       |class ConsoleAppenderFactory:AppenderFactory
       |{
       |        override Appender factory(immutable Bundle bundle)
       |        {
0000000|                return new ConsoleAppender();
       |        }
       |}
       |
       |
       |/**
       | * Accept messages and publicate it on console
       | */
       |class ConsoleAppender:Appender
       |{
       |        /**
       |         * Append new message and print it to console
       |         */
       |        @trusted /* writefln is system */
       |        override void append(immutable string message)
       |        {
       |                import std.stdio;
0000000|                writeln(message);
       |        }
       |}
       |
       |
       |/**
       | * Factory for FileAppender
       | *
       | * ====================================================================================
       | */
       |class FileAppenderFactory:AppenderFactory
       |{
       |        override Appender factory(immutable Bundle bundle)
       |        {
0000000|                return new FileAppender(bundle);
       |        }
       |}
       |
       |
       |/**
       | * Accept messages and publicate it in file
       | */
       |class FileAppender:Appender
       |{
       |        import std.concurrency;
       |        
       |        /**
       |         * Tid for appender activity
       |         */
       |        Tid activity;
       |        
       |        
       |        /**
       |         * Create Appender
       |         */
       |        @trusted
0000000|        this(immutable Bundle bundle)
       |        {
0000000|                activity = spawn(&fileAppenderActivityStart, bundle);
       |        }
       |        
       |
       |        /**
       |         * Append new message and send it to file
       |         */
       |        @trusted
       |        override void append(immutable string message)
       |        {
0000000|                activity.send(message);
       |        }
       |}
       |
       |
       |/**
       | * Start new thread for file log activity
       | */
       |@system
       |void fileAppenderActivityStart(immutable Bundle bundle)
       |{
0000000|        new FileAppenderActivity(bundle).run();
       |}
       |
       |
       |
       |/**
       | * Logger FileAppender activity
       | *
       | * Write log message to file from one thread
       | */
       |class FileAppenderActivity
       |{
       |        import  onyx.core.controller;
       |        import std.concurrency;
       |        import std.datetime;
       |        
       |        
       |        /**
       |         * Max flush period to write to file
       |         */
       |        enum logFileWriteFlushPeriod = 100; // ms
       |        
       |        
       |        /**
       |     * Activity working status
       |     */
       |    enum AppenderWorkStatus {WORKING, STOPPING}
       |    private auto workStatus = AppenderWorkStatus.WORKING;
       |
       |
       |    long startFlushTime;
       |    
       |    
       |    /**
       |         * Max flush period to write to file
       |         */
       |        Controller controller;
       |    
       |    
       |        /**
       |         * Primary constructor
       |         *
       |         * Save config path and name
       |         */
0000000|    this(immutable Bundle bundle)
       |    {
       |        try
       |        {
0000000|                controller = Controller(bundle);
       |                }
       |                catch (Exception e)
       |                {
       |                        import std.stdio;
0000000|                        writeln("FileAppenderActivity exception: " ~ e.msg);
       |                }       
       |
0000000|                startFlushTime = Clock.currStdTime();
       |    }
       |
       |    import std.stdio;
       |    import std.conv;
       |    
       |    
       |    /**
       |         * Entry point for start module work
       |         */
       |        @system
       |        void run()
       |        {
       |                /**
       |                 * Timer cycle for flush log file
       |                 */
       |
       |                
0000000|                while (workStatus == AppenderWorkStatus.WORKING)
       |                {
0000000|                        workCycle();
       |                }
       |        }
       |
       |
       |
       |        
       |        
       |        /**
       |         * Activity main cycle
       |         */
       |        @trusted
       |        private void workCycle()
       |        {
0000000|                receiveTimeout(
       |                        dur!("msecs")(10),
       |                        (string msg)
       |                        {
0000000|                                controller.saveMsg(msg);
       |                        },
0000000|                        (OwnerTerminated e){workStatus = AppenderWorkStatus.STOPPING;},
       |                        (Variant any){}
       |                );
       |
0000000|                if (logFileWriteFlushPeriod <= (Clock.currStdTime() - startFlushTime)/(1000*10))
       |                {
0000000|                        controller.flush;
0000000|                        startFlushTime = Clock.currStdTime();
       |                }
       |        }
       |        
       |        
       |        
       |
       |}
..\..\..\..\AppData\Roaming\dub\packages\onyx-log-1.2.1-rc3\onyx-log\source\onyx\core\appender.d is 0% covered
